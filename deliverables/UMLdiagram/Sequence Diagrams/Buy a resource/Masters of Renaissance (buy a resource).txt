title Masters of Renaissance (buy a resource)

actor User
participant View
activate View
participantgroup #lightgreen
participant "Client" as Network Handler
end
participantgroup #lightblue
participant "Server" as Virtual View
end
participantgroup #pink
participant Controller
participant MarketManager
participant LeaderCardManager
participant FaithTrackManager
participant ModelChanngeHandlers
end

participantgroup #lightgray
participant Model
end

participant "Other Clients" as OtherVirtualViews

User ->> View: selects the Market
View <-View: access local data and\nupdate view
User <--View: view updated



// ***************Buy Action **************************************
User ->>View: Selects row or column
View --> Network Handler: MarketBuyEvent
deactivate View
Network Handler -#ff00ff>Virtual View: MarketBuyEvent
Virtual View ->Controller: MarketBuyEventHandler(MarketBuyEvent)
activate Controller
Controller->MarketManager: buy(dir, index)
activate MarketManager
MarketManager -> Model: getMarbles(dir, index)
activate Model
Model -> ModelChanngeHandlers : update(market)
activate ModelChanngeHandlers
ModelChanngeHandlers -> OtherVirtualViews : sendObject(MarketStateEvent)
ModelChanngeHandlers -> Virtual View : sendObject(MarketStateEvent)
deactivate ModelChanngeHandlers
Network Handler <#ff00ff-Virtual View: MarketStateEvent
Network Handler->View: updateMarket(rows, clumns, grid, marbleLeft)
MarketManager <--Model: marbles
deactivate Model
Controller <--MarketManager: marbles
deactivate MarketManager


alt if there are red marbles
Controller->FaithTrackManager: incrementFaithTrackPosition(steps)
FaithTrackManager->Model: incrementPosition(steps)
Model -> ModelChanngeHandlers : update(faithTrackData
activate ModelChanngeHandlers
ModelChanngeHandlers -> OtherVirtualViews : sendObject(FaithTrackEvent)
ModelChanngeHandlers -> Virtual View : sendObject(FaithTrackEvent)
Network Handler <#ff00ff-Virtual View: FaithTrackEvent
deactivate ModelChanngeHandlers
Network Handler->View: updateFaithTrack(playerID, position, popeFavorCards)
note over Controller, Model: we ignore the effect of the cell passed and if the end of the faith track is reached, since it's outside the scope of this diagram
end
alt there are white marbles
Controller->LeaderCardManager: getSelectedPowers(EnxtraResourceLeaderPower.class)
activate LeaderCardManager
LeaderCardManager->Model: getSelectedLeaderPowers()
LeaderCardManager <--Model: leaderPowers
Controller <--LeaderCardManager: leaderPowers
deactivate LeaderCardManager
// ****************************************************************



// *********Leader cards with ExtraResourceLeaderPower*************
alt multple selected ExtraResourceLeaderPower
Virtual View <- Controller:sendObject(choseMultipleExtraResourcesEvent)
Network Handler <#ff00ff-Virtual View: choseMultipleExtraResourcesEvent

View <- Network Handler:choseResources(num, allowedTypes)
activate View
User <- View: Shows to the player a way to select\nwhat resource to associate to every\nwhite marble
User --> View: resources chosen
View -->Network Handler: chosenResources
deactivate View
Network Handler -#ff00ff> Virtual View : SimpleChosenResourcesEvent
Virtual View ->Controller: SimpleChosenResourcesEventHandler(SimpleChosenResourcesEventHandler)
loop while the choiches made by the user are wrong
Controller->Virtual View: sendObject(playerActionError)
Virtual View -#ff00ff> Network Handler : playerActionError
Network Handler->View: printWarning(errorMsg)
View->User: display the warning message\nto inform the player on what\nthey did wrong
Virtual View <- Controller: sendObject(choseMultipleExtraResourcesEvent)
Network Handler <#ff00ff-Virtual View: choseMultipleExtraResourcesEvent

View <- Network Handler:choseResources(num, allowedTypes)
activate View
User <- View: Shows to the player a way to select\nwhat resource to associate to every\nwhite marble
User --> View: resources chosen
View -->Network Handler: chosenResources
deactivate View
Network Handler -#ff00ff> Virtual View : SimpleChosenResourcesEvent
Virtual View ->Controller: SimpleChosenResourcesEventHandler(SimpleChosenResourcesEventHandler)
end
end
alt if at least one LeaderPower is selected
Controller -> Controller: change white marble into resource
end
end
// ****************************************************************


Controller->Virtual View: sendObject(OrganizeResourcesEvent)
Controller -> Controller: wait()
Network Handler <#ff00ff-Virtual View: OrganizeResourcesEvent
Network Handler->View: getWarehouseDisplacement(resourcesToOrganize)
activate View
View->User: make the user organize the resources\nbetween the warehouse and the\nDepositLeaderPowers
User-->View: Resource organization
View-->Network Handler: NewResourcesOrganizationEvent
deactivate View
Network Handler -#ff00ff> Virtual View : NewResourcesOrganizationEvent
Virtual View ->Controller: NewResourcesOrganizationEventHandler(NewResourcesOrganizationEvent)
Controller -> Controller: notifyAll()
loop while the new resource organization is invalid (es. multiple depots have the same resource type)
Controller->Virtual View: sendObject(playerActionError)
Virtual View -#ff00ff> Network Handler : playerActionError
Network Handler->View: printWarning(errorMsg)
View->User: display the warning message\nto inform the player on what\nthey did wrong
Controller->Virtual View: sendObject(OrganizeResourcesEvent)
Controller -> Controller: wait()
Network Handler <#ff00ff-Virtual View: OrganizeResourcesEvent
Network Handler->View: getWarehouseDisplacement(resourcesToOrganize)
activate View
View->User: make the user organize the resources\nbetween the warehouse and the\nDepositLeaderPowers
User-->View: Resource organization
View-->Network Handler: NewResourcesOrganizationEvent
deactivate View
Network Handler -#ff00ff> Virtual View : NewResourcesOrganizationEvent
Virtual View ->Controller: NewResourcesOrganizationEventHandler(NewResourcesOrganizationEvent)
Controller -> Controller: notifyAll()
end

Controller->Model: setWarehouseResources(newDepotStates)
Model -> ModelChanngeHandlers : update(dashboard)
activate ModelChanngeHandlers
ModelChanngeHandlers -> OtherVirtualViews : sendObject(DashBoardStateEvent)
ModelChanngeHandlers -> Virtual View : sendObject(DashBoardStateEvent)
Network Handler <#ff00ff-Virtual View: DashBoardStateEvent
deactivate ModelChanngeHandlers
Network Handler->View: updateDashboard(playerID, devCardSlots, strongBox, warehouse)

Controller->LeaderCardManager: removeResourcesFromLeaderCards(resources)
loop for every leader card that contains some of the resources to remove
LeaderCardManager->Model: removeResourcesFromLeaderCard(resources)
Model -> ModelChanngeHandlers : update(depositLeaderPower)
activate ModelChanngeHandlers
ModelChanngeHandlers -> OtherVirtualViews : sendObject(DepositLeaderPowerStateEvent)
ModelChanngeHandlers -> Virtual View : sendObject(DepositLeaderPowerStateEvent)
Network Handler <#ff00ff-Virtual View: DepositLeaderPowerStateEvent
deactivate ModelChanngeHandlers
Network Handler->View: updateLeaderCardDepositState(playerID, leaderCardID, leaderPowerIndex, storedResources)
end

alt if there are discarded resources
Controller->Controller: count discarded resources
Controller->FaithTrackManager: incrementFaithTrackPosition(numDiscardedResources)
FaithTrackManager->Model: incrementPosition(steps)
Model -> ModelChanngeHandlers : update(faithTrackData
activate ModelChanngeHandlers
ModelChanngeHandlers -> OtherVirtualViews : sendObject(FaithTrackEvent)
ModelChanngeHandlers -> Virtual View : sendObject(FaithTrackEvent)
Network Handler <#ff00ff-Virtual View: FaithTrackEvent
deactivate ModelChanngeHandlers
Network Handler->View: updateFaithTrack(playerID, position, popeFavorCards)
note over Controller, Model: we ignore the effect of the cell passed and if the end of the faith track is reached, since it's outside the scope of this diagram
end
