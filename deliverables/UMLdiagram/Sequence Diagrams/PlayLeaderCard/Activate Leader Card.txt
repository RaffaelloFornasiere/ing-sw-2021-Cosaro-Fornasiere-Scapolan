actor User
participant View
participantgroup #lightgreen 
participant Network Handler
end
participantgroup #lightblue
participant Virtual View
end
participantgroup #pink
participant Controller
end 

participantgroup #lightgray
participant Model
end

View <-Network Handler:askForNextAction()
User-->View: activate leader Card
View <-View:askForLeaderCardToActivate()
View <-View:new ActivateLeaderCardEvent()
View->Network Handler: sendObject(ActivateLeaderCardEvent)


Network Handler -#ff00ff>Virtual View: send(ActivateLeaderCardEven)
Virtual View ->Controller:ActivateLeaderCardEventHandler(PropertyChangeEvent evt)
Controller->Controller:leaderCardManager.activateLeaderCard(player, leaderCard)

Controller->Model:Player.activateLeaderCard(leaderCard);
note right of Model:The model changes are notified to the controller with NotifyObservers()
note right of Model:Arises Exceptions if:\n-LeaderCardState is already active\n-Requirements are not met\n-LeaderCard is not owned by this player\n
alt  canActionBePerformed
alt matchState.getTurnState() == TurnState.START
Controller->Controller:matchState.setTurnState(TurnState.AFTER_LEADER_CARD_ACTION)
else 
Controller->Controller:matchState.setTurnState(TurnState.END_OF_TURN)
end

Virtual View<-Controller:sendObject(new PlayerStateEvent())
Network Handler<#ff00ff-Virtual View:send(new PlayerStateEvent())
View<-Network Handler:updateLeaderCardsState()

Virtual View<-Controller:sendObject(new matchStateEvent())
Network Handler<#ff00ff-Virtual View:send(new matchStateEvent())
View<-Network Handler:askForNextAction()
else
alt
alt illegalOperation
Virtual View<-Controller:sendObject(new PlayerActionError())
Network Handler<#ff00ff-Virtual View:send(new PlayerActionError())
Network Handler->View: printWriter.println(MessageWrapper.wrap(eventJSON))


else requirementsNotMetException
Virtual View<-Controller:sendObject(new RequirementsNotMetError())
Network Handler<#ff00ff-Virtual View:send(new RequirementsNotMetError())
Network Handler->View: printWriter.println(MessageWrapper.wrap(eventJSON))
end 
Virtual View<-Controller:sendObject(new matchStateEvent())
Network Handler<#ff00ff-Virtual View:send(new matchStateEvent())
View<-Network Handler:askForNextAction()
else notPresentException
Virtual View<-Controller:sendObject(new BadRequestEvent())
Network Handler<#ff00ff-Virtual View:send(new BadRequestEvent())
Network Handler->View: printWriter.println(MessageWrapper.wrap(eventJSON))
note left of View:Program terminates.
end
end

